% Solve an Autoregression Problem with External Input with a NARX Neural Network
% Script generated by NTSTOOL
% Created Sat Apr 26 13:36:54 EDT 2014
%
%
%
% This script assumes these variables are defined:
%
%   sunspots7 - input time series.
%   sunspots7 - feedback time series.


clc;
clear all;
%Preprocessing
% S = load('sunspots7.txt');
% S1 = load('sunspots3.txt');
S = load('monthly7.txt');
S1 = load('monthly3.txt');

inputSeries = tonndata(S,false,false);
targetSeries = tonndata(S,false,false);
inputtestSeries = tonndata(S1,false,false);
targettestSeries = tonndata(S1,false,false);

[M,N]= size(S);
[M1,N1]= size(S1);



% Create a Nonlinear Autoregressive Network with External Input
inputDelays = 1:10;
feedbackDelays = 1:10;
hiddenLayerSize = 6;
net = narxnet(inputDelays,feedbackDelays,hiddenLayerSize);

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer states.
% Using PREPARETS allows you to keep your original time series data unchanged, while
% easily customizing it for networks with differing numbers of delays, with
% open loop or closed loop feedback modes.
[inputs,inputStates,layerStates,targets] = preparets(net,inputSeries,{},targetSeries);
[tests,inputtestStates,layertestStates,targettests] = preparets(net,inputtestSeries,{},targettestSeries);


% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,inputs,targets,inputStates,layerStates);

% Test the Network
outputs = net(inputs,inputStates,layerStates);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs)


outputs1 = net(tests,inputtestStates,layertestStates);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotregression(targets,outputs)
figure, plotresponse(tests,outputs1)
%figure, ploterrcorr(errors)
%figure, plotinerrcorr(inputs,errors)

% Closed Loop Network
% Use this network to do multi-step prediction.
% The function CLOSELOOP replaces the feedback input with a direct
% connection from the outout layer.
netc = closeloop(net);
netc.name = [net.name ' - Closed Loop'];
view(netc)
[xc,xic,aic,tc] = preparets(netc,inputSeries,{},targetSeries);
[xc1,xic1,aic1,tc1] = preparets(netc,inputtestSeries,{},targettestSeries);
% yc = netc(xc,xic,aic);
% yc1 = netc(xc1,xic1,aic1);

yc = netc(xc,xic,aic);
yc1 = netc(tests(1,:),xic1,aic1);
% closedLoopPerformance = perform(netc,tc,yc) ;


figure, plotresponse(tests,yc1)
% Early Prediction Network
% For some applications it helps to get the prediction a timestep early.
% The original network returns predicted y(t+1) at the same time it is given y(t+1).
% For some applications such as decision making, it would help to have predicted
% y(t+1) once y(t) is available, but before the actual y(t+1) occurs.
% The network can be made to return its output a timestep early by removing one delay
% so that its minimal tap delay is now 0 instead of 1.  The new network returns the
% same outputs as the original network, but outputs are shifted left one timestep.
nets = removedelay(net);
nets.name = [net.name ' - Predict One Step Ahead'];
view(nets)
[xs,xis,ais,ts] = preparets(nets,inputSeries,{},targetSeries);
ys = nets(xs,xis,ais);
earlyPredictPerformance = perform(nets,ts,ys)

%%

error1 = gsubtract(tests,outputs1);
error11 = gsubtract(tests,yc1);
[a,b]=size(error1);
MSE=sum(cell2mat(error1).^2)/b;

mmse= (var(cell2mat(error1(1,:))))/var(cell2mat(tests(1,:)));

mmse1= (var(cell2mat(error11(1,:))))/var(cell2mat(tests(1,:)));


